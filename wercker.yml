# Copyright 2017, Oracle Corporation and/or affiliates.  All rights reserved.

# This is a sample that demonstrates how to use the Java Flight Recorder 
# Wercker step. 
#

box: 
  id: anapsix/alpine-java:8u201b09_jdk

build:
  steps:
    - script:
      name: Build
      code: |
        echo "Hello Java Flight Recorder!"
        echo "Choose the pipeline you want to run, e.g. 'test-timeout' and run it like this:"
        echo "wercker build --pipeline=test-timeout"
        
    - script:
      code : |
        apk --no-cache add curl  
        
    # https://github.com/wercker/step-gradle
    - java/gradle:
      task: build
      cache_project_cache: true

regular-test:
  steps:
    - markxnelson/java-flight-recorder:
      application: com.oracle.sample.SampleApplication
      classpath: /pipeline/source/build/libs/source.jar
      filename: myrecording.jfr
      experimental: true
      duration: 4m
      delay: 30s
     
upload-to-oci:
  steps:
    - script:
      name: Set API_KEY file
      code:  |
         echo -ne "-----BEGIN RSA PRIVATE KEY-----\n" > gen-api.pem
         echo -ne $OS_APIKEY | tr " " "\n" >> gen-api.pem
         echo -ne "\n-----END RSA PRIVATE KEY-----\n" >> gen-api.pem
         
    - oci-objectstore:
      command: put
      region: us-ashburn-1
      tenancy-ocid: $TENANCY_OCID
      user-ocid: $USER_OCID
      fingerprint: $FINGERPRINT
      api-key: "$(cat gen-api.pem)"
      bucket-name: $BUCKET_NAME
      namespace: $NAMESPACE
      local-file: myrecording.jfr
      overwrite: true
      
#not in use, timeout attribute seems to be causing issues 
test-timeout:
  steps:
    - markxnelson/java-flight-recorder:
      timeout: 2m
      application: com.oracle.sample.SampleApplication
      classpath: /pipeline/source/build/libs/source.jar
      filename: myrecording.jfr
      experimental: true
      duration: 4m
      delay: 30s 
      maxsize: 10M
      maxage: 1h
